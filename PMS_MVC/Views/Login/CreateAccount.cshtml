@model PMS_MVC.Models.Login;
@{
    Layout = "_NullLayout";
    ViewData["Title"] = "Create Account Page";
}
<link rel="stylesheet" href="~/css/login.css" asp-append-version="true" />
<partial name="_Notification" />
<div class="container d-flex justify-content-center align-items-center">
    <div class="shadow-lg rounded bg-white p-4 w-100" style="max-width: 600px;">
        <div class="formTitle mt-3" id="formTile"><h5>Create Account</h5></div>
        <form asp-action="CreateAccount" asp-controller="Login" method="post" class="dark-mode2" id="addCategoryForm">
            <div class="row mb-3">
                <div class="col-12">
                    <input type="hidden" />
                    <div class="form-floating">
                        <input asp-for="@Model.Email" type="text" id="email" class="form-control" placeholder="Email">
                        <label for="email">Email</label>
                        <span asp-validation-for="@Model.Email" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <div class="form-floating password-field">
                        <input asp-for="@Model.Password" type="password" id="password" class="form-control" placeholder="Password">
                        <label for="password">Password</label>
                        @* <button type="button" id="togglePassword" class="btn btn-outline-secondary btn-sm">Show</button> *@
                        <i class="fa-solid fa-eye"></i>
                        <span asp-validation-for="@Model.Password" class="text-danger"></span>
                    </div>
                    <div class="content">
                        <p>Password must contain</p>
                        <ul class="requirement-list">
                            <li>
                                <i class="fa-solid fa-circle"></i>
                                <span>At least 8 characters length</span>
                            </li>
                            <li>
                                <i class="fa-solid fa-circle"></i>
                                <span>At least 1 number (0...9)</span>
                            </li>
                            <li>
                                <i class="fa-solid fa-circle"></i>
                                <span>At least 1 lowercase letter (a...z)</span>
                            </li>
                            <li>
                                <i class="fa-solid fa-circle"></i>
                                <span>At least 1 special symbol (!...$)</span>
                            </li>
                            <li>
                                <i class="fa-solid fa-circle"></i>
                                <span>At least 1 uppercase letter (A...Z)</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <div class="form-floating confirmpassword-field">
                        <input asp-for="@Model.ConfirmPassword" id="confirmPassword" type="password" class="form-control" placeholder="Confirm Password">
                        <label asp-for="@Model.ConfirmPassword" for="confirmpassword">Confirm Password</label>
                        @* <button type="button" id="toggleConfirmPassword" class="btn btn-outline-secondary btn-sm">Show</button> *@
                        <i class="fa-solid fa-eye"></i>
                        <span asp-validation-for="@Model.ConfirmPassword" class="text-danger"></span>
                    </div>

                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <p>If you have already account?</p>
                    <span>
                        <a class="" asp-area="" asp-controller="login" asp-action="Login" style="color: #07cff7;">
                            Login
                        </a>
                    </span>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @Html.AntiForgeryToken()
                    <button type="submit" value="Save" class="btn btn-success text-white w-100">Create Account</button>
                </div>
            </div>
        </form>
    </div>
</div>

<partial name="_ValidationScriptsPartial" />

<script>
    document.getElementById('togglePassword').addEventListener('click', function () {
        const passwordField = document.getElementById('password');
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
        this.textContent = type === 'password' ? 'Show' : 'Hide';
    });

    document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
        const passwordField = document.getElementById('confirmPassword');
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
        this.textContent = type === 'password' ? 'Show' : 'Hide';
    });
</script>
<script>
    const passwordInput = document.querySelector(".password-field input");
    const eyeIcon = document.querySelector(".password-field i");
    const requirementList = document.querySelectorAll(".requirement-list li");

    const requirements = [
        { regex: /.{8,}/, index: 0 }, // Minimum of 8 characters
        { regex: /[0-9]/, index: 1 }, // At least one number
        { regex: /[a-z]/, index: 2 }, // At least one lowercase letter
        { regex: /[^A-Za-z0-9]/, index: 3 }, // At least one special character
        { regex: /[A-Z]/, index: 4 }, // At least one uppercase letter
    ];
    passwordInput.addEventListener("keyup", (e) => {
        requirements.forEach((item) => {
            const isValid = item.regex.test(e.target.value);
            const requirementItem = requirementList[item.index];
            if (isValid) {
                requirementItem.classList.add("valid");
                requirementItem.firstElementChild.className = "fa-solid fa-check";
            } else {
                requirementItem.classList.remove("valid");
                requirementItem.firstElementChild.className = "fa-solid fa-circle";
            }
        });
    });

    eyeIcon.addEventListener("click", () => {
        passwordInput.type =
            passwordInput.type === "password" ? "text" : "password";
        eyeIcon.className = `fa-solid fa-eye${passwordInput.type === "password" ? "" : "-slash"
            }`;
    });
</script>
